// Generated by CoffeeScript 1.6.3
var app, _ref,
  __hasProp = {}.hasOwnProperty;

window.BatmanDebug = (function() {
  function BatmanDebug() {}

  BatmanDebug.objectMap = new Batman.Hash;

  BatmanDebug.prototype.init = function() {
    return this.messageListener();
  };

  BatmanDebug.prototype.messageListener = function() {
    var _this = this;
    return window.addEventListener('message', function(event) {
      if (event.data["for"] === 'batman.debug') {
        return _this.handleMessage(event.data.data, function(res, options) {
          var data;
          if (options == null) {
            options = {};
          }
          data = JSON.stringify(BatmanDebug.prettify(res));
          return window.postMessage({
            id: event.data.id,
            "for": 'batbelt',
            data: data,
            options: options
          }, '*');
        });
      }
    });
  };

  BatmanDebug.prototype.handleMessage = function(msg, cb) {
    switch (msg.type) {
      case 'ping':
        return cb({
          type: 'pong'
        });
      case 'storageAdapter':
        return this.storageAdapter(msg.key, msg.options, cb);
      case 'observeProperty':
        return this.observeProperty(msg.id, msg.property, cb);
      default:
        return console.log('Unknown message', msg);
    }
  };

  BatmanDebug.prototype.storageAdapter = function(key, options, cb) {
    var action, modelName, _ref;
    _ref = key.split('::'), action = _ref[0], modelName = _ref[1];
    modelName = Batman.helpers.camelize(modelName);
    return BatmanDebug[modelName][action](options, function(res) {
      return cb(res, {
        close: true
      });
    });
  };

  BatmanDebug.prototype.observeProperty = function(id, property, cb) {
    var _ref;
    return (_ref = BatmanDebug.objectMap.get(id)) != null ? _ref.observe(property, function(newValue) {
      return cb(newValue, {
        close: false
      });
    }) : void 0;
  };

  return BatmanDebug;

})();

BatmanDebug.AppController = (function() {
  function AppController(name) {
    var instanceName;
    this.name = name;
    instanceName = this.name.substr(0, this.name.length - 'Controller'.length);
    this.instanceName = Batman.helpers.underscore(instanceName);
    this.instance = Batman.currentApp.get("controllers." + instanceName);
    BatmanDebug.objectMap.set(this.instance._batmanID(), this.instance);
  }

  AppController.prototype.isCurrentController = function() {
    return Batman.currentApp.get('currentRoute.controller') === this.instanceName;
  };

  AppController.prototype.toJSON = function() {
    var obj;
    obj = BatmanDebug.prettify(this.instance);
    obj.id = this.instance._batmanID();
    obj.name = this.name;
    obj.action = this.instance.get('action');
    obj.path = this.instance.get('params.path');
    obj.current = this.isCurrentController();
    return obj;
  };

  AppController.readAll = function(options, cb) {
    var attr, controller, controllers, name, _ref;
    controllers = [];
    _ref = Batman.currentApp;
    for (name in _ref) {
      if (!__hasProp.call(_ref, name)) continue;
      attr = _ref[name];
      if (attr.prototype instanceof Batman.Controller) {
        controller = new this(name);
        controllers.push(controller.toJSON());
      }
    }
    return cb(controllers);
  };

  return AppController;

})();

BatmanDebug.AppModel = (function() {
  function AppModel(name) {
    this.name = name;
    this.instances = Batman.currentApp[this.name].get('loaded');
    this.instances.forEach(function(instance) {
      return BatmanDebug.objectMap.set(instance._batmanID(), instance);
    });
  }

  AppModel.prototype.serializeInstances = function() {
    return this.instances.map(function(model) {
      return {
        id: model._batmanID(),
        properties: model.toJSON()
      };
    });
  };

  AppModel.prototype.toJSON = function() {
    return {
      name: this.name,
      instances: this.serializeInstances()
    };
  };

  AppModel.readAll = function(options, cb) {
    var attr, model, models, name, _ref;
    models = [];
    _ref = Batman.currentApp;
    for (name in _ref) {
      if (!__hasProp.call(_ref, name)) continue;
      attr = _ref[name];
      if (attr.prototype instanceof Batman.Model) {
        model = new this(name);
        if (model.instances.length) {
          models.push(model.toJSON());
        }
      }
    }
    return cb(models);
  };

  return AppModel;

})();

BatmanDebug.AppView = (function() {
  function AppView() {}

  AppView.readAll = function(options, cb) {
    var attr, name, views, _ref;
    views = [];
    _ref = Batman.currentApp;
    for (name in _ref) {
      if (!__hasProp.call(_ref, name)) continue;
      attr = _ref[name];
      if (attr.prototype instanceof Batman.Model) {
        views.push({
          name: name
        });
      }
    }
    return cb(views);
  };

  return AppView;

})();

if ((_ref = window.Batman) != null ? _ref.currentApp : void 0) {
  app = window.Batman.currentApp;
  app.debug = new BatmanDebug();
  app.debug.init();
}
