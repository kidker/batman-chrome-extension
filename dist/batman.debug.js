// Generated by CoffeeScript 1.6.2
(function() {
  var app, _ref;

  window.BatmanDebug = (function() {
    function BatmanDebug() {}

    BatmanDebug.prototype.init = function() {
      return this.messageListener();
    };

    BatmanDebug.prototype.messageListener = function() {
      var _this = this;

      return window.addEventListener('message', function(event) {
        if (event.data["for"] === 'batman.debug') {
          return _this.handleMessage(event.data.data, function(res) {
            return window.postMessage({
              id: event.data.id,
              from: 'batman.debug',
              data: res
            }, '*');
          });
        }
      });
    };

    BatmanDebug.prototype.handleMessage = function(msg, cb) {
      console.log('message received', msg);
      switch (msg.type) {
        case 'ping':
          return cb({
            type: 'pong'
          });
        case 'storageAdapter':
          return this.storageAdapter(msg.key, msg.options, cb);
        default:
          return console.log('Unknown message', msg);
      }
    };

    BatmanDebug.prototype.storageAdapter = function(key, options, cb) {
      var action, modelName, _ref;

      console.log('storageAdapter args', arguments);
      _ref = key.split('::'), action = _ref[0], modelName = _ref[1];
      modelName = Batman.helpers.camelize(modelName);
      return BatmanDebug[modelName][action](options, cb);
    };

    return BatmanDebug;

  })();

  BatmanDebug.DebugController = (function() {
    function DebugController() {}

    DebugController.readAll = function(options, cb) {
      var attr, controllers, name, _ref;

      controllers = [];
      _ref = Batman.currentApp;
      for (name in _ref) {
        attr = _ref[name];
        if (attr.prototype instanceof Batman.Controller) {
          controllers.push({
            name: name
          });
        }
      }
      return cb(controllers);
    };

    return DebugController;

  })();

  BatmanDebug.DebugModel = (function() {
    function DebugModel() {}

    DebugModel.readAll = function(options, cb) {
      var attr, models, name, _ref;

      models = [];
      _ref = Batman.currentApp;
      for (name in _ref) {
        attr = _ref[name];
        if (attr.prototype instanceof Batman.Model) {
          models.push({
            name: name
          });
        }
      }
      return cb(models);
    };

    return DebugModel;

  })();

  BatmanDebug.DebugView = (function() {
    function DebugView() {}

    DebugView.readAll = function(options, cb) {
      var attr, name, views, _ref;

      views = [];
      _ref = Batman.currentApp;
      for (name in _ref) {
        attr = _ref[name];
        if (attr.prototype instanceof Batman.Model) {
          views.push({
            name: name
          });
        }
      }
      return cb(views);
    };

    return DebugView;

  })();

  if ((_ref = window.Batman) != null ? _ref.currentApp : void 0) {
    app = window.Batman.currentApp;
    app.debug = new BatmanDebug();
    app.debug.init();
  }

}).call(this);
