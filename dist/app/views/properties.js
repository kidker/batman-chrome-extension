// Generated by CoffeeScript 1.6.3
var _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Batbelt.PropertiesView = (function(_super) {
  __extends(PropertiesView, _super);

  function PropertiesView() {
    _ref = PropertiesView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  PropertiesView.option('properties');

  PropertiesView.prototype.source = 'properties';

  PropertiesView.accessor('propertyKeys', function() {
    var _ref1;
    return (_ref1 = this.get('properties')) != null ? _ref1.keys() : void 0;
  });

  PropertiesView.accessor('isObject', function() {
    var _this = this;
    return new Batman.Accessible(function(key) {
      return typeof _this.get("properties." + key) === 'object';
    });
  });

  PropertiesView.prototype.expandObject = function(key, node, event) {
    var context, div;
    if (event.target !== node) {
      return;
    }
    if (node.childNodes.length > 1) {
      return node.innerHTML = '[Object]';
    }
    div = document.createElement('div');
    div.setAttribute('data-view-properties', 'value');
    node.appendChild(div);
    context = Batman({
      value: new Batman.Hash(this._buildHash(this.get("properties." + key)))
    });
    return new Batbelt.PropertiesView({
      node: div,
      context: context,
      parentView: this
    });
  };

  PropertiesView.prototype._buildHash = function(value) {
    var hash, id;
    switch (Object.prototype.toString.call(value)) {
      case '[object Function]':
        return {
          0: '<Function>'
        };
      case '[object Array]':
        id = 0;
        hash = {};
        value.forEach(function(item) {
          return hash[id++] = item;
        });
        return hash;
      case '[object Object]':
        return value;
    }
  };

  return PropertiesView;

})(Batman.View);
